// ==============================================
// M√ìDULO: Aplica√ß√£o Principal Otimizada
// ==============================================
// Vers√£o: 2.0.0 - Performance Optimized
// Descri√ß√£o: Sistema principal otimizado com inicializa√ß√£o sequencial

import { initializeDOMCache, cleanupAll } from './utils.js';
import { 
  initializeHamburgerMenu, 
  initializeNavigationEffects, 
  initializeMenuOutsideClick 
} from './navigation.js';
import { initializeAppleMenu, cleanupAppleMenu } from './apple-menu.js';
import { 
  initializeAnimations, 
  initializeCustomCursor 
} from './animations.js';
import { initializeLightbox } from './lightbox.js';
import { initializeLoadingScreen, initializeLazyLoading } from './loading.js';
import { initializeUXEnhancements, cleanupUXEnhancements } from './ux-enhancements.js';
import { initializeNavigationDots, cleanupNavigationDots } from './navigation-dots.js';
import { runPerformanceTests, quickPerformanceCheck } from './performance-test.js';

/**
 * Inicializa todos os m√≥dulos da aplica√ß√£o de forma sequencial e otimizada
 * @returns {Promise<void>}
 */
export async function initializeApp() {
  try {
    console.log('üöÄ Iniciando aplica√ß√£o otimizada...');
    
    // 1. Inicializa cache DOM primeiro
    initializeDOMCache();
    
    // 2. Aguarda a tela de loading terminar
    await initializeLoadingScreen();
    
    // 3. Inicializa m√≥dulos cr√≠ticos primeiro
    initializeHamburgerMenu();
    initializeNavigationEffects();
    initializeMenuOutsideClick();
    initializeAppleMenu();
    
    // 4. Inicializa m√≥dulos visuais
    initializeAnimations();
    initializeCustomCursor();
    initializeLightbox();
    
    // 5. Inicializa m√≥dulos de navega√ß√£o
    initializeNavigationDots();
    
    // 6. Inicializa melhorias de UX
    initializeUXEnhancements();
    
    // 7. Inicializa lazy loading para imagens n√£o cr√≠ticas
    initializeLazyLoading();
    
    // 8. Marca aplica√ß√£o como inicializada
    window.PortfolioApp = {
      initialize: initializeApp,
      cleanup: cleanup,
      isInitialized: true,
      runPerformanceTests: runPerformanceTests,
      quickPerformanceCheck: quickPerformanceCheck
    };
    
    console.log('‚úÖ Aplica√ß√£o otimizada inicializada com sucesso!');
    
    // Log de informa√ß√µes √∫teis
    logAppInfo();
    
    // Executa verifica√ß√£o r√°pida de performance em desenvolvimento
    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
      setTimeout(() => {
        console.log('\nüîç Executando verifica√ß√£o r√°pida de performance...');
        quickPerformanceCheck();
      }, 2000);
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao inicializar aplica√ß√£o:', error);
  }
}

/**
 * Loga informa√ß√µes √∫teis sobre a aplica√ß√£o
 * @returns {void}
 */
function logAppInfo() {
  const info = {
    'Elementos animados': document.querySelectorAll('.animated').length,
    'Imagens no lightbox': document.querySelectorAll('.imagem-projeto, .imagem-projeto-galeria').length,
    'Links de navega√ß√£o': document.querySelectorAll('a').length,
    'Elementos parallax': 'Desabilitado',
    'Imagens lazy loading': document.querySelectorAll('img[data-src]').length,
    'Vers√£o': '2.0.0',
    'Modular': true,
    'UX Enhancements': true,
    'Performance': 'Otimizada',
    'Testes de Performance': 'Dispon√≠veis'
  };
  
  console.table(info);
}

/**
 * Fun√ß√£o de limpeza completa para quando a p√°gina for descarregada
 * @returns {void}
 */
export function cleanup() {
  // Remove event listeners e observers
  cleanupAll();
  
  // Limpa m√≥dulos espec√≠ficos
  cleanupNavigationDots();
  cleanupAppleMenu();
  cleanupUXEnhancements();
  
  console.log('üßπ Limpeza completa da aplica√ß√£o realizada');
}

/**
 * Event listener principal - aguarda DOM estar pronto
 */
if (document.readyState === 'loading') {
  document.addEventListener("DOMContentLoaded", initializeApp);
} else {
  // DOM j√° est√° pronto
  initializeApp();
}

/**
 * Event listener para limpeza quando a p√°gina for descarregada
 */
window.addEventListener("beforeunload", cleanup);

/**
 * Event listener para limpeza quando a p√°gina for escondida
 */
document.addEventListener("visibilitychange", () => {
  if (document.hidden) {
    // P√°gina escondida - pode pausar algumas anima√ß√µes
    console.log('üì± P√°gina escondida - otimizando recursos');
  } else {
    // P√°gina vis√≠vel novamente
    console.log('üì± P√°gina vis√≠vel - restaurando recursos');
  }
});

/**
 * Comandos de debug para console
 */
window.debugPortfolio = {
  // Executa testes completos de performance
  runTests: () => {
    console.log('üß™ Executando testes completos de performance...');
    runPerformanceTests();
  },
  
  // Verifica√ß√£o r√°pida
  quickCheck: () => {
    console.log('‚ö° Executando verifica√ß√£o r√°pida...');
    quickPerformanceCheck();
  },
  
  // Mostra informa√ß√µes da aplica√ß√£o
  info: () => {
    console.log('üìä Informa√ß√µes da aplica√ß√£o:');
    logAppInfo();
  },
  
  // Mostra estado atual
  state: () => {
    console.log('üîç Estado atual da aplica√ß√£o:');
    console.log('PortfolioApp:', window.PortfolioApp);
    console.log('APP_STATE:', window.APP_STATE);
    console.log('DOM_CACHE:', window.DOM_CACHE);
  },
  
  // Limpa recursos
  cleanup: () => {
    console.log('üßπ Executando cleanup manual...');
    cleanup();
  }
};

// Adiciona comandos de debug ao console
console.log('üîß Comandos de debug dispon√≠veis:');
console.log('- debugPortfolio.runTests() - Executa testes completos');
console.log('- debugPortfolio.quickCheck() - Verifica√ß√£o r√°pida');
console.log('- debugPortfolio.info() - Informa√ß√µes da aplica√ß√£o');
console.log('- debugPortfolio.state() - Estado atual');
console.log('- debugPortfolio.cleanup() - Limpeza manual'); 